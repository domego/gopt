// Code generated by go-bindata.
// sources:
// Makefile
// NAME
// README.md
// app.go.tmpl
// config/config.yaml
// config.go.tmpl
// gen_types.go.tmpl
// main.go.tmpl
// router.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x73\xf4\x75\xb5\x4d\x48\x4e\x2c\x51\x00\xb1\x12\xb8\xb8\x92\x4a\x33\x73\x52\xac\xb8\x38\x1d\xd2\xf3\x15\xc0\x6c\x05\xdd\x7c\x85\xa4\xcc\x3c\x7d\x15\x0d\x90\x0a\x4d\x2e\x2e\xbd\x00\x0f\x7f\xbf\x48\x2b\x88\x2c\x17\x20\x00\x00\xff\xff\x34\xa1\xfe\xdc\x41\x00\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 65, mode: os.FileMode(420), modTime: time.Unix(1497174442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _name = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\x02\x04\x00\x00\xff\xff\xc5\x48\x82\xef\x0a\x00\x00\x00")

func nameBytes() ([]byte, error) {
	return bindataRead(
		_name,
		"NAME",
	)
}

func name() (*asset, error) {
	bytes, err := nameBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NAME", size: 10, mode: os.FileMode(420), modTime: time.Unix(1497174547, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\xe5\xe2\x32\xd4\x53\x78\x3a\x7f\xd7\xb3\x39\x6b\x5e\x2e\xdc\xf9\x7c\xf6\xba\xe7\xbb\x27\x3f\x9b\xd7\x62\xcd\x65\xa4\xa7\xe0\x1f\xe4\xab\xa0\xad\xe0\xe2\xe4\x9c\x98\x9c\x91\xaa\x11\x94\x9a\x92\x59\xac\xef\x9b\x9a\x9b\x0c\xe2\x6a\x5a\x73\x19\xeb\x29\x38\x06\x78\x3a\x16\xa5\x17\x5b\x73\x99\xe8\x29\x84\x54\x16\xa4\x16\x5b\x73\x01\x02\x00\x00\xff\xff\x0f\x48\xaa\x33\x5c\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 92, mode: os.FileMode(420), modTime: time.Unix(1497174569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xcd\x6a\xdc\x30\x14\x85\xd7\xd6\x53\xdc\x18\x02\x36\x38\x36\xdd\x06\x66\x31\xb4\x43\x32\x30\x1d\x82\x9d\xac\x42\x28\x1a\xeb\x5a\x11\x96\x25\x23\x79\x26\x84\x92\x27\xe8\xdf\xaa\xab\xae\xba\xeb\x1b\x64\x53\xc8\xcb\xf4\x27\xbb\xbe\x42\xb9\xf2\x0c\x4d\x87\xae\xba\x13\x3a\xf7\x9e\x73\xf4\xa9\xe7\x75\xcb\x25\x42\xc7\x95\x61\x4c\x75\xbd\x75\x03\x24\x2c\x8a\xfd\xad\xaf\xb9\xd6\x31\x63\x00\xb1\x54\xc3\xf5\x7a\x95\xd7\xb6\x2b\x9a\xcd\xca\xd6\x6d\x81\x46\x68\xf4\x3e\xde\x53\xa5\x32\x47\xd2\x1a\x55\xd3\x69\x5f\xd4\x68\x56\xf6\xa8\xe3\xa4\xb5\x6a\x28\x3a\x25\x84\xc6\x1b\xee\x30\x66\xd1\xbf\x07\x6d\xab\x06\x5f\x68\x2b\x63\x96\x32\xd6\xac\x4d\x0d\xd7\x9c\xa2\xa7\x7d\x9f\xa4\xf0\x9a\x45\x52\x99\xbc\xc2\xe1\xa5\x15\x98\xd4\x8d\xcc\x67\x66\x93\xb2\xc8\xd9\xf5\x80\x70\x3c\x01\x92\x97\x78\x93\xec\xee\xf2\x0b\x8f\xc9\x9f\xe0\x7c\x61\xa5\x44\x97\xa4\x7f\xe9\xb4\x54\x62\x6d\x37\xe8\x6e\x47\x09\xa5\xf2\x43\x49\x03\x49\x18\x4b\x59\xe4\xd1\x6d\xd0\x51\xc6\x96\x05\xe5\x54\xe1\x32\x14\x99\x0a\xe1\xd0\xfb\x0c\x76\x0b\x45\x01\x3f\xde\x7d\x7c\x7c\x7f\xff\xf8\xf0\xe9\xe7\x97\x37\x17\x55\xf9\xec\xdb\xc3\xe7\xef\x1f\xee\x7f\x7d\x7d\xeb\x50\x5b\x2e\x9e\x5b\xd3\x28\xb9\xb3\xce\x2b\x25\x0d\xd7\xa7\xd6\xb6\xfe\x72\x97\x71\x56\xce\x5e\x55\xf3\x93\xe5\x74\x71\x75\xb9\xfd\xa2\xbc\x9a\x9f\x90\xd9\x15\x4c\x80\xf7\x3d\x1a\x91\xfc\xa7\x41\x06\x44\x78\xe4\x1a\x8d\x9c\xcb\x50\x6c\x34\x22\x88\x77\x29\x63\x91\x6a\x60\x8b\x1a\x0e\x46\xc4\x2f\x70\xb5\x96\xf4\x07\x61\x55\x5b\x99\xcf\x4d\x63\x9b\x24\x3e\xf4\xc7\xb0\x50\x7e\x40\xa3\x8c\x04\x6e\x04\x50\x37\x3a\x9f\x9e\x9f\x9f\x81\x35\x70\xe8\xe3\x8c\x7a\x2f\x79\x87\x19\x3c\x21\x47\x69\x2c\x42\x17\x18\x6f\x5f\x34\x5a\x4d\x8d\x08\xa0\xa9\x90\x6a\x80\x46\x0e\x26\x60\x94\x7e\x52\x7c\x66\x04\xc9\xa1\xcb\xcc\x39\xeb\x42\x99\x38\xa3\xe9\xe0\x7c\xc7\x7e\x07\x00\x00\xff\xff\x71\x0a\xf0\xc6\xfc\x02\x00\x00")

func appGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_appGoTmpl,
		"app.go.tmpl",
	)
}

func appGoTmpl() (*asset, error) {
	bytes, err := appGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.go.tmpl", size: 764, mode: os.FileMode(420), modTime: time.Unix(1497324782, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x4c\x49\x29\x4a\x2d\x2e\xb6\x52\x50\x32\x34\x32\xd7\x33\xd0\x33\xd0\x33\xb4\xaa\xae\xd6\x0b\xc8\x2f\x2a\xa9\xad\x55\xe2\x4a\xcd\x2b\xb3\x52\x50\x4a\x49\x4d\x2a\x4d\x57\xe2\xca\xc9\x4f\x8f\xcf\x49\x2d\x4b\xcd\xb1\x52\x50\x2a\x29\x4a\x4c\x4e\x55\xe2\x02\x04\x00\x00\xff\xff\x8b\x1d\xeb\xd8\x3f\x00\x00\x00")

func configConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigYaml,
		"config/config.yaml",
	)
}

func configConfigYaml() (*asset, error) {
	bytes, err := configConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.yaml", size: 63, mode: os.FileMode(420), modTime: time.Unix(1497174631, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\xaf\xd3\x30\x0c\xc6\xcf\xf1\x5f\x61\x22\x81\x5a\x34\x5a\xc1\x71\x52\x0f\x08\xc6\x69\xe2\x80\xc4\x99\x65\xad\x9b\x45\x4b\xe3\x2a\x49\xc7\x7b\x9a\xf6\xbf\x23\xb7\x1d\x30\x2e\xbc\x69\x52\x1b\x7f\xf6\x97\x5f\x3f\x8f\xa6\x3d\x1b\x4b\x38\x18\x17\x00\xdc\x30\x72\xcc\x58\x80\xd2\x8e\x6b\xc7\x53\x76\x5e\x83\xd2\x9c\x34\x80\xd2\xd6\xe5\xd3\x74\xac\x5a\x1e\x6a\x4f\xe1\xc8\xef\x06\x53\x5b\x3e\xbb\x9c\x6a\xcf\x56\x83\x7a\x36\x83\x47\x6d\x79\x3c\xdb\xca\x85\x5a\x8e\xd5\xe5\x83\x86\x12\xa0\xae\xf1\x13\x87\xde\x59\x6c\x97\x47\xca\x71\x6a\x33\xe4\xe7\x91\xee\xca\x52\xc2\x2b\xa8\x8f\x5d\x17\x29\x25\x94\x92\x0b\x16\x0f\x62\xb5\xd5\x66\x29\xeb\x03\xa8\x5d\xb8\xe0\xfc\x7b\xec\xa0\x70\x11\x75\xcf\x76\x4f\x17\xf2\xff\xa8\x9e\xed\x0f\x2f\x75\x7d\x80\xdb\xcc\x14\xc9\x74\xeb\xed\xf2\x8a\x26\x74\x38\x9a\x98\x68\xc5\xfc\xe2\x3c\x41\x3f\x85\xf6\xaf\xce\x82\x9e\x5c\xc6\x23\xb3\x2f\xf1\xed\x3a\x7c\x05\x75\x4c\x1b\xa4\x18\x71\xdb\xe0\x92\x5c\xf5\x8d\x4c\x27\x06\xc5\x1f\xaf\x12\x94\xeb\xe7\xb6\x57\x0d\x06\xe7\x65\x50\x79\xb6\xd5\x2e\x46\x8e\x7d\xa1\x3d\x9b\xee\x1e\x51\xef\x3c\x61\x6f\x9c\xa7\x6e\x83\xf9\x44\x38\x9a\x7c\x42\x97\xf0\x75\xd2\x1b\x7c\x30\x9d\x5d\x05\x4b\xfc\x14\xa7\x6a\xf7\xe4\x72\xf1\x5e\x94\x1b\xc8\x7f\xb5\xdc\x36\xf8\x66\x41\xbe\xde\x40\x09\x47\x83\xf3\x9a\xbe\x87\xc1\xc4\x74\x32\xbe\x90\xef\x58\xba\xff\x0b\x3b\xdd\x87\x7e\x13\xaf\xb0\x33\x20\xc5\xf8\x12\xb2\x48\x79\x8a\x61\x75\x90\xb5\xac\x71\x4b\x12\x6b\xe0\xa5\x0c\xcb\xc5\x9f\xa9\x37\x93\xcf\x7b\xb6\x96\x62\xb5\xac\xb8\x41\x51\xbe\xd2\xcf\xf9\x58\xb4\xbd\xad\xee\xeb\x2f\xe1\x06\xbf\x02\x00\x00\xff\xff\xd5\x9e\x58\xbf\xe2\x02\x00\x00")

func configGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_configGoTmpl,
		"config.go.tmpl",
	)
}

func configGoTmpl() (*asset, error) {
	bytes, err := configGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.go.tmpl", size: 738, mode: os.FileMode(420), modTime: time.Unix(1497174442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gen_typesGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\xc1\x4a\x03\x31\x10\x86\xef\xf3\x14\x3f\xcb\x1e\xf4\x92\xd2\x6b\xa1\x4f\x20\x8a\xa0\x78\xb5\x69\x33\x2c\xd5\x34\x09\xd9\xd9\xc8\x32\xcc\xbb\x4b\xba\x07\xc1\xdb\x30\xf3\x7d\xdf\xec\x76\x13\x27\xae\x5e\x38\xe0\xbc\x62\x2a\x42\xc5\x5f\xbe\xfd\xc4\x50\x75\xaf\xdb\x68\x46\x74\xbd\x95\x5c\x05\x0f\x04\x0c\x72\xbd\xf1\x40\x8f\x44\xcd\x57\x7c\xe2\x88\xbe\x70\x2f\xf9\x87\x48\xb5\xfa\x34\x31\xc6\x86\xc3\x11\x92\xdf\x72\x15\x0e\xcf\xbe\xc0\xbd\xaf\x85\x67\x33\x92\xb5\xf4\xf8\xd8\xdc\x13\xaf\x30\xc3\x2c\x75\xb9\x08\x94\x80\x3f\x7d\xff\xdf\x1f\x9b\xfb\xf0\x71\x61\x98\xdd\xc1\xb1\xed\x7b\xc0\x0c\xaa\x69\x89\xd1\x9f\x23\xf7\x17\xdd\xdd\x48\x33\x9c\xbe\xe6\x9c\x0e\x83\xea\x92\x02\xd7\x78\x4d\xdb\xf9\xee\x0d\x27\xa8\x72\x0a\x66\x64\xa4\x0a\x4e\xa1\xb7\x7f\x03\x00\x00\xff\xff\x19\x31\x59\xf6\x12\x01\x00\x00")

func gen_typesGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_gen_typesGoTmpl,
		"gen_types.go.tmpl",
	)
}

func gen_typesGoTmpl() (*asset, error) {
	bytes, err := gen_typesGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen_types.go.tmpl", size: 274, mode: os.FileMode(420), modTime: time.Unix(1497164150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x93\x41\x6b\x1b\x3d\x10\x86\xcf\xd2\xaf\x98\x4f\x60\xd8\xfd\xd8\xae\x7b\x08\x3d\x04\xf6\x10\xda\xb4\x04\x9a\x60\x92\x42\x0f\x69\x28\xb2\x77\x24\x0f\xd1\x4a\x42\x92\x93\x9a\x92\xff\x5e\x24\x6d\xb2\x26\x3e\x58\x1e\xe9\xd5\xbc\x33\x8f\x47\x5e\xee\x1e\xa5\x46\x98\x24\x59\xce\x69\xf2\x2e\x24\x68\x38\x13\xca\x48\x2d\xf2\x3a\xa5\xbc\x90\x5b\x93\x3b\x24\x32\x39\x70\x31\x7f\xc7\x14\x76\xce\x3e\xcd\x3f\xc9\xea\xba\x7b\x8c\x3b\x69\x8c\xe0\x9c\x09\x4d\x69\x7f\xd8\xf6\x3b\x37\xad\x0d\xda\xad\xfb\x30\xc9\xb5\x76\x8f\x94\xe2\xda\x38\x2d\x78\xcb\xf9\x93\x0c\xd9\x6e\xa7\x34\xe4\xcf\xff\x9f\x9d\x55\xa4\x39\x93\xde\xdf\xc8\x09\xa1\x66\xe6\xcc\xd3\x58\x04\x64\xd3\xe9\xb5\xa2\xfe\x4a\x06\x01\x06\x10\x35\x5c\xd7\xa5\x3f\xca\x29\x57\xeb\x69\xac\x02\x28\x1a\xe3\xf4\x5a\x7a\xdf\x7b\x1a\xc5\x9b\x4d\x11\x0c\x20\x6e\x2e\xae\x2f\x4b\x59\xea\x60\x77\x40\x96\x52\xd3\xc2\x5f\xce\xb2\xdd\x6f\x18\xc0\xc5\xfe\xfa\x71\xa4\xd0\xe4\x34\xa2\x2b\xb1\x1b\x71\x83\x61\x6a\x39\xdb\xc6\x0e\x30\x04\x38\x1f\xa0\xb2\xea\x6f\x51\x16\xf3\xe6\xc4\xa7\xe5\x8c\x54\xd1\xfd\x37\x80\x25\x93\xf3\x33\xe3\x74\x7f\x19\x82\x0b\xaa\x11\x01\xe5\x08\xaf\xfd\x63\xde\xec\x20\xed\x11\xbc\x4c\x7b\xa0\x08\xab\x6a\xe3\xc2\x39\xac\xa2\xe8\xe0\x24\x77\x39\x68\x39\x7b\x59\x00\x0e\x33\xc2\xd8\xff\x08\x34\x35\x35\x68\xb6\xb1\xed\x40\xfc\xb2\xa2\xe5\x2f\x73\xb7\xcf\x81\x12\x6e\x68\xac\x1d\x67\xde\x03\xcc\x7f\x66\xff\x0d\x93\xcf\x27\x9c\xcd\x8d\xfd\xcc\xe2\xd2\xd9\x8c\xb7\x83\xfb\x87\xed\x31\x61\x33\x4f\x45\x7f\x95\x9c\xcc\x87\x6d\xdb\xc1\xc7\x4f\x67\x67\x8b\xd1\x5e\xda\xd1\xe0\xa5\x9d\x9d\x5c\xec\x6f\x71\x72\x4f\x6f\xa9\xde\x2b\x6f\xd1\x38\x39\xde\x91\xb6\xd2\xd4\x2b\x16\x9f\xeb\x9c\x64\xd4\x19\x57\x8d\x1a\x25\x4d\x9c\xf9\x2e\x92\x77\x94\xaf\xac\x72\xaa\x11\xab\x78\x0e\xa1\x24\x86\x3a\x2e\x0b\xc8\x96\xb3\x32\x8f\xc3\x92\x84\x33\x56\xc5\xb3\x51\x41\xfc\x5a\x65\x7e\x3a\xb5\xae\xfc\x66\xfa\x8d\x0c\x11\xb3\x62\x01\xca\x8b\xf3\x17\x54\xf2\x60\xd2\x77\xa7\x35\x86\xfe\x0e\xd3\x26\xa0\xa2\x3f\x8d\x9a\x52\x7f\xe7\x03\xd9\xa4\x1a\x71\xbf\x1a\x1f\xe0\x7e\x15\x1f\x44\x07\x9e\xc6\xa5\xa8\x96\xf3\xb9\xaa\x93\x86\x53\x38\xe4\x72\x47\x54\x18\xe0\xa4\x3b\xb4\xa3\x68\x39\xab\xfc\x2e\xbc\x6f\x32\xd3\x7f\x01\x00\x00\xff\xff\x30\x54\xd7\xbe\xeb\x03\x00\x00")

func mainGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_mainGoTmpl,
		"main.go.tmpl",
	)
}

func mainGoTmpl() (*asset, error) {
	bytes, err := mainGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go.tmpl", size: 1003, mode: os.FileMode(420), modTime: time.Unix(1497174442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc6\xc1\x09\x82\x31\x0c\x06\xd0\x7b\xa6\x08\x3d\xa9\x60\x9d\xc2\x05\xdc\xa0\x86\x18\x3f\xa4\x49\xa9\xe9\x49\xdc\xfd\xa7\x97\xc7\x1b\x4d\x3e\xcd\x94\x7b\x83\x13\xa1\x8f\x98\xc9\xc5\x90\xef\xf5\xac\x12\xfd\x66\xf0\xab\x85\x43\xf6\x0a\xd1\x6b\xb9\xf0\x54\xc3\x37\x1f\xb1\x52\x4f\x73\xcb\x17\x83\xd7\xbb\x1b\x5c\xcf\xfc\xa3\x3f\x1d\x01\x00\x00\xff\xff\x5c\x5c\x62\x07\x59\x00\x00\x00")

func routerGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGoTmpl,
		"router.go.tmpl",
	)
}

func routerGoTmpl() (*asset, error) {
	bytes, err := routerGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router.go.tmpl", size: 89, mode: os.FileMode(420), modTime: time.Unix(1497324800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Makefile": makefile,
	"NAME": name,
	"README.md": readmeMd,
	"app.go.tmpl": appGoTmpl,
	"config/config.yaml": configConfigYaml,
	"config.go.tmpl": configGoTmpl,
	"gen_types.go.tmpl": gen_typesGoTmpl,
	"main.go.tmpl": mainGoTmpl,
	"router.go.tmpl": routerGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"NAME": &bintree{name, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"app.go.tmpl": &bintree{appGoTmpl, map[string]*bintree{}},
	"config": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{configConfigYaml, map[string]*bintree{}},
	}},
	"config.go.tmpl": &bintree{configGoTmpl, map[string]*bintree{}},
	"gen_types.go.tmpl": &bintree{gen_typesGoTmpl, map[string]*bintree{}},
	"main.go.tmpl": &bintree{mainGoTmpl, map[string]*bintree{}},
	"router.go.tmpl": &bintree{routerGoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


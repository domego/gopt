// generate by ginpt
package {{.PackageName}}

import (
  "github.com/gin-gonic/gin"
  "github.com/domego/ginkits"
  "github.com/domego/gokits"
  "github.com/domego/gokits/log"
)

var _ = log.Tracef
var _ = kits.RenderSuccess
var _ = utils.IsEmpty

{{range .Routes}}
// {{.Name}}Args {{.Desc}}请求参数
type {{.Name}}Args struct {
  // BaseParam 基础公共参数
  BaseParam
  {{ if .Arguments }}
  {{range parseAPIArguments .Arguments}}
    {{.Name}} {{.Type}} `form:"{{underline .Name}}" json:"{{underline .Name}}"` {{end}}
  {{end}}
}

// Do{{.Name}} {{.Desc}}
func Do{{.Name}}(c *gin.Context) {
  params := {{.Name}}Args{}
  c.Bind(&params.BaseParam)
  {{if .Arguments}} c.Bind(&params)
    {{range parseAPIArguments .Arguments}}
      {{if isBuildIn .Type}}{{if not .Optional}}
        if utils.IsEmpty(params.{{.Name}}) {
          kits.RenderError(c, &kits.RespErrorMessage{
           Code: kits.ErrorCodeArgumentLack,
           Message: "{{underline .Name}} is required",
          })
          return
        }{{end}} {{if .Optional}}{{if isNotEmpty .Default}}
        if utils.IsEmpty(params.{{.Name}}) {
          params.{{.Name}} = {{.Default}}
        } {{end}}{{end}}
      {{end}}
    {{end}}
  {{end}}
  {{if isEmpty .Result}}do{{.Name}}(c, &params){{end}}
  {{if isNotEmpty  .Result}}
  result, hasError := do{{.Name}}(c, &params)
  if hasError {
    kits.RenderError(c, result)
    return
  }
  kits.RenderSuccess(c, result){{end}}
}
{{end}}

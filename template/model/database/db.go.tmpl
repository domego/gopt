// generated by ginpt
package {{underline .Name}}
{{ $table := .Table }}

import (
	"database/sql"

	"github.com/domego/gorp"
	_ "github.com/go-sql-driver/mysql"
	"github.com/domego/gokits/log"
  "github.com/domego/ginkits/db"
  "gopkg.in/redis.v3"
)

var (
  DBConfig *db.DBConfig
  RedisClient *redis.Client
  // DefaultCacheTTL 默认CACHE时间1天
  DefaultCacheTTL = 24 * 60 * 60

	dbInfo		*db.DBInfo
	serialDBInfo	*db.DBInfo
)

func GetDB() *db.DBInfo {
	if dbInfo != nil {
		return dbInfo
	}
	database, err := sql.Open("mysql", DBConfig.Source())
	if err != nil {
		panic(err)
	}
	if DBConfig.MaxIdleConns != 0 {
		database.SetMaxIdleConns(DBConfig.MaxIdleConns)
	}
	if DBConfig.MaxOpenConns != 0 {
		database.SetMaxOpenConns(DBConfig.MaxOpenConns)
	}
	dbmap := &gorp.DbMap{Db: database, Dialect: gorp.MySQLDialect{}}
	{{ range .TableMetas}} {{ if match $table .TableName}} dbmap.AddTableWithName({{ upperCamel .TableName}}{}, "{{.TableName}}").SetKeys({{if eq .PrimaryKeyExtra "auto_increment"}}true{{else}}false{{end}}, "{{.PrimaryKey}}")
		{{end}} {{end}}
	dbmap.TraceOn("", log.DefaultLogger)

	dbInfo = &db.DBInfo{DB:database, DbMap: dbmap}
	return dbInfo
}

func GetSerialDB() *db.DBInfo {
	if serialDBInfo != nil {
		return serialDBInfo
	}
	database, err := sql.Open("mysql", DBConfig.SerialSource())
	if err != nil {
		panic(err)
	}
	if DBConfig.MaxIdleConns != 0 {
		database.SetMaxIdleConns(DBConfig.MaxIdleConns)
	}
	if DBConfig.MaxOpenConns != 0 {
		database.SetMaxOpenConns(DBConfig.MaxOpenConns)
	}
	dbmap := &gorp.DbMap{Db: database, Dialect: gorp.MySQLDialect{}}
	{{ range .TableMetas}} {{ if match $table .TableName}} dbmap.AddTableWithName({{ upperCamel .TableName}}{}, "{{.TableName}}").SetKeys({{if eq .PrimaryKeyExtra "auto_increment"}}true{{else}}false{{end}}, "{{.PrimaryKey}}")
		{{end}} {{end}}
	dbmap.TraceOn("", log.DefaultLogger)

	serialDBInfo = &db.DBInfo{DB:database, DbMap: dbmap}
	return serialDBInfo
}

func CloseDB() {
	if dbInfo != nil {
		dbInfo.DB.Close()
	}
	dbInfo = nil
}

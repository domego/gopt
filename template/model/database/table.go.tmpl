// generated by ginpt
package {{underline .DBName}}

import (
  "database/sql"
  "time"
  "fmt"
  "bytes"

  "github.com/xiaoenai/gorp"
  "github.com/lenbo-ma/ginkit/db"
  "github.com/lenbo-ma/gokits"
)

var _ = time.Now
var _ = fmt.Println
var _ = sql.ErrNoRows
var _ = bytes.NewBuffer
var _ = utils.Int32

type {{upperCamel .TableName}} struct {
  {{ range $i, $v := .Columns }}
  {{upperCamel $v.Field}} {{$v.GoType}} `db:"{{$v.Field}}" json:"{{$v.Field}}"` {{end}}

  _db *db.DBInfo     `db:"-"`
  _tx *db.Transaction  `db:"-"`
}

func New{{upperCamel .TableName}}() *{{upperCamel .TableName}} {
  obj := New{{upperCamel .TableName}}WithoutDB()
  obj.SetDBInfo()
  return obj
}

func New{{upperCamel .TableName}}WithoutDB() *{{upperCamel .TableName}} {
  obj := &{{upperCamel .TableName}}{
    {{range .Columns}}
      {{if .Default }}
        {{setDefault . }}
      {{end}}
    {{end}}
  }
  return obj
}

func (obj *{{upperCamel .TableName}}) SetDBInfo() {
  database := GetDB()
  obj._db = &db.DBInfo {
    DB: database.DB,
    DbMap: database.DbMap,
  }
}

func (obj *{{upperCamel .TableName}}) SetTransaction(tx *db.Transaction) {
  obj._tx = tx
}

func (obj *{{upperCamel .TableName}}) GetSqlExecutor() gorp.SqlExecutor {
  if obj._tx != nil {
    return obj._tx
  }
  return obj._db
}

func (obj *{{upperCamel .TableName}}) Insert() {
  database := obj.GetSqlExecutor()
  {{ range .Columns }}
    {{ if eq .Field "created_at" }}
      {{ if eq .Null "YES"}}
        {{if eq .GoType "int32" }}
          obj.{{upperCamel .Field}} = int32(utils.GetUTCTime().Unix())
        {{else}}
          obj.{{upperCamel .Field}} = utils.GetLocalTime()
        {{end}}
      {{else}}
        {{if eq .GoType "int32" }}
          obj.{{upperCamel .Field}} = int32(utils.GetUTCTime().Unix())
        {{else}}
          obj.{{upperCamel .Field}} = time.Now()
        {{end}}
      {{end}}
    {{end}}
    {{ if eq .Field "updated_at" }}
      {{ if eq .Null "YES"}}
        {{if eq .GoType "int32" }}
          obj.{{upperCamel .Field}} = int32(utils.GetUTCTime().Unix())
        {{else}}
          obj.{{upperCamel .Field}} = utils.GetLocalTime()
        {{end}}
      {{else}}
        {{if eq .GoType "int32" }}
          obj.{{upperCamel .Field}} = int32(utils.GetUTCTime().Unix())
        {{else}}
          obj.{{upperCamel .Field}} = time.Now()
        {{end}}
      {{end}}
    {{end}}
  {{end}}
  err := database.Insert(obj)
  if err != nil {
    panic(err)
  }
}

func Get{{upperCamel .TableName}}Where(cond string, args ...interface{}) []*{{upperCamel .TableName}} {
  objs := []*{{upperCamel .TableName}}{}
  database := GetDB()
  _, err := database.Select(&objs, "SELECT {{getTableFieldNames .Columns}} FROM `{{.TableName}}` WHERE " + cond, args...)
  if err != nil {
    panic(err)
  }
  for _, obj := range objs {
    obj.SetDBInfo()
  }
  return objs
}

func Get{{upperCamel .TableName}}Count(cond string, args ...interface{}) int64 {
  database := GetDB()
  cnt, err := database.SelectInt("SELECT count(1) FROM `{{.TableName}}` WHERE " + cond, args...)
  if err != nil {
    panic(err)
  }
  return cnt
}

func Get{{upperCamel .TableName}}First(cond string, args ...interface{})  *{{upperCamel .TableName}} {
  obj := &{{upperCamel .TableName}}{}
  database := GetDB()
  err := database.SelectOne(obj, "SELECT {{getTableFieldNames .Columns}} FROM `{{.TableName}}` WHERE "+cond + " LIMIT 1", args...)
  if err != nil {
    if err.Error() == sql.ErrNoRows.Error() {
      return nil
    }
    panic(err)
  }
  obj.SetDBInfo()
  return obj
}

func Get{{upperCamel .TableName}}ByField(name string, field interface{}) *{{upperCamel .TableName}} {
  obj := &{{upperCamel .TableName}}{}
  database := GetDB()
  err := database.SelectOne(obj, "SELECT {{getTableFieldNames .Columns}} FROM `{{.TableName}}` WHERE `" + name + "`=?", field)
  if err != nil {
    if err.Error() == sql.ErrNoRows.Error() {
      return nil
    }
    panic(err)
  }
  obj.SetDBInfo()
  return obj
}

func Get{{upperCamel .TableName}}ByFieldWithCondition(name, cond string, field interface{}) *{{upperCamel .TableName}} {
  obj := &{{upperCamel .TableName}}{}
  database := GetDB()
  err := database.SelectOne(obj, "SELECT {{getTableFieldNames .Columns}} FROM `{{.TableName}}` WHERE `" + name + "`=? " + cond, field)
  if err != nil {
    if err.Error() == sql.ErrNoRows.Error() {
      return nil
    }
    panic(err)
  }
  obj.SetDBInfo()
  return obj
}

func Get{{upperCamel .TableName}}(key {{.PrimaryKeyType}}) *{{upperCamel .TableName}} {
  obj := &{{upperCamel .TableName}}{}
  database := GetDB()
  err := database.SelectOne(obj, "SELECT {{getTableFieldNames .Columns}} FROM `{{.TableName}}` WHERE `{{.PrimaryKey}}`=?", key)
  if err != nil {
    if err.Error() == sql.ErrNoRows.Error() {
      return nil
    }
    panic(err)
  }
  obj.SetDBInfo()
  return obj
}
